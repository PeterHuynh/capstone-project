
version: 2.1

jobs:
  build:
    docker:    
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}            
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint to lint Dockerfile
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 

            chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      
      - run:
          name: Run Code Linting
          command: |
            . venv/bin/activate
            make lint           
      - run:
          name: Run Unit Test
          command: |
            . venv/bin/activate
            make test           

  create_image:
    docker:
      - image: cimg/base:2023.02      
    environment:
      username: $DOCKERHUB_USERNAME
      password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker Client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin

      - run:
          name: Build and Push Docker Image
          command: |
            cat /etc/os-release                                 
            TAG="v1.0.0"
            docker build -t peterhuynh99/projectapp:${TAG} .
            docker login --username ${DOCKERHUB_USERNAME} --password ${DOCKERHUB_PASSWORD}
            docker push peterhuynh99/projectapp:${TAG}
  
  create_aws_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar gzip packages
          command: |
            yum -y install tar gzip
      - run: 
          name: Create AWS Infrastructure
          command: |
            aws cloudformation create-stack --stack-name ph-cf-network-infra --template-body file://cfn_network_infra.yml --parameters file://cfn_network_infra_parameters.json  --region us-west-2             

  delete_aws_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Delete AWS Infrastructure
          command: |
            aws cloudformation delete-stacks --stack-name ph-cf-network-infra --region us-west-2 
  
  create_ec2_deployment_server:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create EC2 Server
          command: |
            aws cloudformation deploy --stack-name "c2-server-backend" --template-file .circleci/files/backend.yml --tags qa=cicd  --region us-west-2

workflows:
  default:
    jobs:
      # - build
      # - create_image:
      #     requires: [build]
      - create_aws_infrastructure
      - create_ec2_deployment_server:
          requires: [create_aws_infrastructure]